import telebot
import datetime
import pickle
import atexit

class Player:
    ''' –ö–ª–∞—Å—Å Player –∏–º–µ–µ—Ç –ø–æ–ª—è:
            _id - –Ω–µ–∏–∑–º–Ω—è–µ–º–æ–µ –ø–æ–ª–µ - id –∏–≥—Ä–æ–∫–∞
            _name - –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–æ–µ –ø–æ–ª–µ - –∏–º—è –∂–∞–±–∫–∏
            last_feed - –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
            size - —Ä–∞–∑–º–µ—Ä –∂–∞–±–∫–∏'''
    def __init__(self, id : str, name: str ):
        '''
        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞:
            id - —Å—Ç—Ä–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            name - —Å—Ç—Ä–æ—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∂–∞–±—ã'''
        self._id = id
        self._name = name
        self.last_feed =datetime.datetime.now() - datetime.timedelta(minutes=20)
        self.size = 1
    def feed(self):
        '''
        –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—à–ª–æ –ª–∏ 20 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è –∏
        –ø—Ä–∏–±–∞–≤–ª–µ—Ç 1 –∫ —Ä–∞–∑–º–µ—Ä—É(size)'''
        if datetime.datetime.now() - self.last_feed > datetime.timedelta(minutes=20):
            self.size += 1
            self.last_feed  = datetime.datetime.now()
        else:
            raise PlayerException
    def __str__(self):
        '''–®–∞–±–ª–æ–Ω –¥–ª—è –≤—ã–≤–æ–¥–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ –≤ —Å—Ç—Ä–æ—á–Ω–æ–º –≤–∏–¥–µ'''
        return f"{self._name}üê∏  ==>  {self.size} –∫–≥."

class PlayerException(Exception):
    def __init__(self):
        self.message = "–ñ–∞–±–∞ —â–µ –Ω–µ –≥–æ–ª–æ–¥–Ω–∞"
        super().__init__(self.message)



try:
    with open('data.pickle', 'rb') as f:
       players =  pickle.load(f)
except FileNotFoundError as e:
    players = []
    print(e)



bot = telebot.TeleBot("1876587727:AAGtGvs8iwNyF9ocTt-svNSffMixkc6xrKM")

@bot.message_handler(commands=['start',])
def send_welcome(message):
	bot.send_message(message.from_user.id, f"""
üíñ {message.from_user.first_name}, –ü—Ä–∏–≤—ñ—Ç!

–©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∂–∞–±–∫—É üê∏ —Ç–∞ –ø–æ—á–∞—Ç–∏ –≥—Ä—É –ø–∏—à–∏ /frog

–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏ –ø—Ä–æ—Å—Ç—ñ, –≥–æ–¥—É–π –∂–∞–±–∫—Éüê∏ —Ä–∞–∑ –≤ 20 —Ö–≤–∏–ª–∏–Ω —ñ –≤–æ–Ω–∞ –±—É–¥–µ —Ä–æ—Å—Ç–∏, —á–∏–º –±—ñ–ª—å—à–∞ –∂–∞–±–∞ üê∏ —Ç–∏–º –≤–∏—â–µ —Ä–µ–π—Ç–∏–Ω–≥üìà""")



@bot.message_handler(commands = ['frog'])
def register_user(message):
    msg = bot.send_message(message.from_user.id, "–¢–µ–ø–µ—Ä –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–∞—Ç–∏ –ñ–∞–±—Ü—ñüê∏ —ñ–º'—è. –í–≤–µ–¥–∏ –π–æ–≥–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º")
    bot.register_next_step_handler(msg, create_user)

def create_user(message):
    for i in players:
        if str(message.from_user.id) == i._id:
            bot.send_message(message.from_user.id , "–í–∏ –≤–∂–µ —Å—Ç–≤–æ—Ä–∏–ª–∏ –∂–∞–±–∫—Éüê∏")
            return
    try:
        players.append(Player(str(message.from_user.id), message.text))
        bot.send_message(message.from_user.id, "–ñ–∞–±–∫–∞üê∏ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞ ‚úÖ, —Ç–µ–ø–µ—Ä —ó—ó –º–æ–∂–Ω–∞ –ø–æ–≥–æ–¥—É–≤–∞—Ç–∏ü™≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /feed")
    except Exception:
        bot.send_message(message.from_user.id, "–£–ø—Å, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚õî")
 

@bot.message_handler(commands  = ['feed'])
def feed(message):
    for i in players:
        if str(message.from_user.id) == i._id:
            try:
                i.feed()
                bot.send_message(message.from_user.id, f"{i._name}üê∏ –Ω–∞–≥–æ–¥–æ–≤–∞–Ω–∞ü™≤")
            except PlayerException:
                time  = (i.last_feed + datetime.timedelta(minutes = 20)) - datetime.datetime.now() 
                bot.send_message(message.from_user.id,
                 f"–ñ–∞–±—É –º–æ–∂–Ω–∞ –±—É–¥–µ –ø–æ–≥–æ–¥—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ {(time.seconds//60)%60} —Ö–≤. üïò")
            return
    bot.send_message(message.from_user.id, "–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∂–∞–±–∫—Éüê∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /frog")



@bot.message_handler(commands = ['rating'])
def rating(message):
    temp = ""
    if players:
        for i in players:
            temp += f"{str(i)}\n"
        bot.reply_to(message, temp)
    else:
        bot.reply_to(message, "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∏ —â–æ –ø—É—Å—Ç–∏–π")

def serialize():
    with open('data.pickle', 'wb') as f:
        pickle.dump(players, f)

if __name__ == "__main__":
    bot.polling()
    atexit.register(serialize)

